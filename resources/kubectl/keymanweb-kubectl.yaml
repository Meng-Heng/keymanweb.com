apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-keyman-com
  namespace: keyman
  labels:
    app: web-keyman-com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-keyman-com
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: web-keyman-com
      name: web-keyman-com
      namespace: keyman
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - web-keyman-com
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      containers:
      - name: app-php
        image: ghcr.io/keymanapp/web-keyman-com
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - name: web-site-app
          mountPath: /var/www/html
          subPath: html
          readOnly: true
        readinessProbe:
          httpGet:
            path: /robots.txt
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 15
        livenessProbe:
          tcpSocket:
            port: 80

      - name: api
        image: alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsGroup: 33
        env:
        - name: DEPLOY_KEY
          valueFrom:
            secretKeyRef:
              name: web-keyman-com
              key: deploy_key
        - name: SITE_GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              name: web-keyman-com
              key: site-branch
        command: ["sh", "-c"]
        args:
        - |
          set -e
          apk add git webhook
          exec webhook -verbose \
            -urlprefix=api \
            -template \
            -hooks=/webhooks/hooks.yaml
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: webhooks
          mountPath: /webhooks
          readOnly: true
        - name: web-site-app
          mountPath: /mnt

      initContainers:
      - name: init-site-repo
        image: k8s.gcr.io/git-sync/git-sync:v3.6.2
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 0
          runAsGroup: 33
        env:
        - name: GIT_SYNC_BRANCH
          valueFrom:
            configMapKeyRef: {name: web-keyman-com, key: site-branch}
        args: [
          --repo=https://github.com/keymanapp/keymanweb.com.git,
          --sparse-checkout-file=/tmp/git/sparse-checkout.config,
          --one-time, --depth=1, --root=/mnt, --dest=html]
        volumeMounts:
        - name: web-site-app
          mountPath: /mnt
        - name: git-config
          mountPath: /tmp/git

      - name: init-site-vendoring
        image: ghcr.io/keymanapp/web-keyman-com
        securityContext:
          runAsUser: 0
          runAsGroup: 33
        command: ["sh", "-c"]
        args:
        - |
          #!/bin/bash
          ln -sf /var/www/vendor /mnt/html/vendor
          cd /mnt/html
          ./build.sh configure
          if [ -f /mnt/html/resources/init-container.sh ]; then
            cd /mnt/html
            /mnt/html/resources/init-container.sh
          fi
        volumeMounts:
        - name: web-site-app
          mountPath: /mnt

      volumes:
      - name: web-site-app
        persistentVolumeClaim:
          claimName: web-keyman-com
      - name: git-config
        configMap:
          name: web-keyman-com
          items:
          - key: git-sparse-checkout
            path: sparse-checkout.config
      - name: webhooks
        configMap:
          name: web-keyman-com
          items:
          - key: deployer
            path: deploy.sh
            mode: 365
          - key: webhooks
            path: hooks.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-keyman-com
  namespace: keyman
data:
  site-branch: staging
  git-sparse-checkout: |
    /*
    !.editorconfig
    !.github
    !composer.*
    !Dockerfile
    !Readme.md
    !web.config
  deployer: |
    #!/bin/sh
    git fetch --depth 1 && git reset --hard origin/${SITE_GIT_BRANCH}
  webhooks: |
    - id: deploy
      execute-command: /webhooks/deploy.sh
      command-working-directory: /mnt/html
      http-methods: [POST]
      trigger-rule:
        and:
        - or:
          - match:
              type: payload-hmac-sha256
              secret: '{{ getenv "DEPLOY_KEY" }}'
              parameter:
                source: header
                name: X-Hub-Signature-256
          - match:
              type: payload-hmac-sha1
              secret: '{{ getenv "DEPLOY_KEY" }}'
              parameter:
                source: header
                name: X-Hub-Signature
        - match:
            type: value
            value: 'refs/heads/{{getenv "SITE_GIT_BRANCH"}}'
            parameter:
              source: payload
              name: ref